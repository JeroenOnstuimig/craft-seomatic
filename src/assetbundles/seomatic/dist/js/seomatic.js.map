{"version":3,"sources":["webpack:///js/seomatic.js","webpack:///./src/assetbundles/seomatic/src/img/Seomatic-icon.svg","webpack:///./src/assetbundles/seomatic/src/img/link-icon.svg","webpack:///./src/assetbundles/seomatic/src/img/missing_image.png","webpack:///./src/assetbundles/seomatic/src/img/no_image_set.png","webpack:///./src/assetbundles/seomatic/src/img/redirects-icon.svg","webpack:///./src/assetbundles/seomatic/src/img/script-icon.svg","webpack:///./src/assetbundles/seomatic/src/img/sitemap-icon.svg","webpack:///./src/assetbundles/seomatic/src/img/structured-data-icon.svg","webpack:///./src/assetbundles/seomatic/src/img/tags-icon.svg","webpack:///./src/assetbundles/seomatic/src/img/variables-icon.svg","webpack:///./~/bootstrap-tokenfield/js/bootstrap-tokenfield.js","webpack:///./src/assetbundles/seomatic/src/js/seomatic.js"],"names":["webpackJsonp","module","exports","__webpack_require__","p","global","define","factory","amd","window","$","input","fn","Error","Tokenfield","element","options","_self","this","$element","textDirection","css","extend","tokenfield","defaults","tokens","val","data","_delimiters","delimiter","_triggerKeys","map","charCodeAt","_firstDelimiter","whitespace","inArray","dash","unshift","specialCharacters","each","index","char","elCSSWidth","elRules","getMatchedCSSRules","elStyleWidth","style","width","elWidth","i","rule","hidingPosition","originalStyles","position","prop","$wrapper","hasClass","addClass","id","Date","getTime","Math","floor","random","$input","appendTo","$label","length","$copyHelper","prependTo","parents","disable","readonly","$mirror","minWidth","insertBefore","update","setTokens","listen","isEmptyObject","autocomplete","side","autocompleteOptions","minLength","showAutocompleteOnFocus","my","at","of","typeahead","typeaheadOptions","args","isArray","apply","trigger","prototype","constructor","createToken","attrs","triggerChange","value","label","trim","limit","getTokens","createEvent","Event","isDefaultPrevented","$token","attr","append","parent","before","$tokenLabel","find","$closeButton","maxTokenWidth","outerWidth","parseInt","text","on","e","_disabled","_readonly","preventDeactivation","ctrlKey","metaKey","preventDefault","toggle","activate","shiftKey","allowEditing","edit","proxy","remove","relatedTarget","get","getTokensList","initiator","add","split","RegExp","join","getTokenData","active","self","activeClass","push","beautify","separator","token","getInput","change","focusInput","focus","blur","paste","keydown","keypress","keyup","$_menuElement","menu","ui","item","unedit","datum","dataset","leftRight","direction","is","document","activeElement","preventInputFocus","upDown","opposite","firstActiveToken","deactivate","focused","keyCode","lastInputValue","activateAll","createTokensFromInput","lastKeyDown","lastKeyPressCode","lastKeyPressCharCode","charCode","$prevToken","prevAll","lastKeyUp","removeClass","$firstActiveToken","search","preventCreateTokens","createTokensOnBlur","setTimeout","tokensBefore","next","$lastActiveToken","$nextToken","nextAll","prev","multi","remember","a","slice","min","max","select","toggleClass","editEvent","tokenWidth","$_input","replaceWith","type","target","closest","firstToken","first","removeEvent","removedEvent","changeEvent","stopPropagation","inputPaddingLeft","inputPaddingRight","inputPadding","mirrorWidth","offset","left","setProperty","enable","writeable","property","destroy","removeData","old","option","param","Array","arguments","elements","$this","shift","Constructor","noConflict","call"],"mappings":"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","file":"js/seomatic.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */,\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/Seomatic-icon.svg\";\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/link-icon.svg\";\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/missing_image.png\";\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/no_image_set.png\";\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/redirects-icon.svg\";\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/script-icon.svg\";\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/sitemap-icon.svg\";\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/structured-data-icon.svg\";\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/tags-icon.svg\";\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"img/variables-icon.svg\";\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n/*!\n * bootstrap-tokenfield\n * https://github.com/sliptree/bootstrap-tokenfield\n * Copyright 2013-2014 Sliptree and other contributors; Licensed MIT\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (true) {\n    // For CommonJS and CommonJS-like environments where a window with jQuery\n    // is present, execute the factory with the jQuery instance from the window object\n    // For environments that do not inherently posses a window with a document\n    // (such as Node.js), expose a Tokenfield-making factory as module.exports\n    // This accentuates the need for the creation of a real window or passing in a jQuery instance\n    // e.g. require(\"bootstrap-tokenfield\")(window); or require(\"bootstrap-tokenfield\")($);\n    module.exports = global.window && global.window.$ ?\n      factory( global.window.$ ) :\n      function( input ) {\n        if ( !input.$ && !input.fn ) {\n          throw new Error( \"Tokenfield requires a window object with jQuery or a jQuery instance\" );\n        }\n        return factory( input.$ || input );\n      };\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function ($, window) {\n\n  \"use strict\"; // jshint ;_;\n\n /* TOKENFIELD PUBLIC CLASS DEFINITION\n  * ============================== */\n\n  var Tokenfield = function (element, options) {\n    var _self = this\n\n    this.$element = $(element)\n    this.textDirection = this.$element.css('direction');\n\n    // Extend options\n    this.options = $.extend(true, {}, $.fn.tokenfield.defaults, { tokens: this.$element.val() }, this.$element.data(), options)\n    \n    // Setup delimiters and trigger keys\n    this._delimiters = (typeof this.options.delimiter === 'string') ? [this.options.delimiter] : this.options.delimiter\n    this._triggerKeys = $.map(this._delimiters, function (delimiter) {\n      return delimiter.charCodeAt(0);\n    });\n    this._firstDelimiter = this._delimiters[0];\n\n    // Check for whitespace, dash and special characters\n    var whitespace = $.inArray(' ', this._delimiters)\n      , dash = $.inArray('-', this._delimiters)\n\n    if (whitespace >= 0)\n      this._delimiters[whitespace] = '\\\\s'\n\n    if (dash >= 0) {\n      delete this._delimiters[dash]\n      this._delimiters.unshift('-')\n    }\n\n    var specialCharacters = ['\\\\', '$', '[', '{', '^', '.', '|', '?', '*', '+', '(', ')']\n    $.each(this._delimiters, function (index, char) {\n      var pos = $.inArray(char, specialCharacters)\n      if (pos >= 0) _self._delimiters[index] = '\\\\' + char;\n    });\n\n    // Store original input width\n    var elRules = (window && typeof window.getMatchedCSSRules === 'function') ? window.getMatchedCSSRules( element ) : null\n      , elStyleWidth = element.style.width\n      , elCSSWidth\n      , elWidth = this.$element.width()\n\n    if (elRules) {\n      $.each( elRules, function (i, rule) {\n        if (rule.style.width) {\n          elCSSWidth = rule.style.width;\n        }\n      });\n    }\n\n    // Move original input out of the way\n    var hidingPosition = $('body').css('direction') === 'rtl' ? 'right' : 'left',\n        originalStyles = { position: this.$element.css('position') };\n    originalStyles[hidingPosition] = this.$element.css(hidingPosition);\n    \n    this.$element\n      .data('original-styles', originalStyles)\n      .data('original-tabindex', this.$element.prop('tabindex'))\n      .css('position', 'absolute')\n      .css(hidingPosition, '-10000px')\n      .prop('tabindex', -1)\n\n    // Create a wrapper\n    this.$wrapper = $('<div class=\"tokenfield form-control\" />')\n    if (this.$element.hasClass('input-lg')) this.$wrapper.addClass('input-lg')\n    if (this.$element.hasClass('input-sm')) this.$wrapper.addClass('input-sm')\n    if (this.textDirection === 'rtl') this.$wrapper.addClass('rtl')\n\n    // Create a new input\n    var id = this.$element.prop('id') || new Date().getTime() + '' + Math.floor((1 + Math.random()) * 100)\n    this.$input = $('<input type=\"text\" class=\"token-input\" autocomplete=\"off\" />')\n                    .appendTo( this.$wrapper )\n                    .prop( 'placeholder',  this.$element.prop('placeholder') )\n                    .prop( 'id', id + '-tokenfield' )\n                    .prop( 'tabindex', this.$element.data('original-tabindex') )\n\n    // Re-route original input label to new input\n    var $label = $( 'label[for=\"' + this.$element.prop('id') + '\"]' )\n    if ( $label.length ) {\n      $label.prop( 'for', this.$input.prop('id') )\n    }\n\n    // Set up a copy helper to handle copy & paste\n    this.$copyHelper = $('<input type=\"text\" />').css('position', 'absolute').css(hidingPosition, '-10000px').prop('tabindex', -1).prependTo( this.$wrapper )\n    \n    // Set wrapper width\n    if (elStyleWidth) {\n      this.$wrapper.css('width', elStyleWidth);\n    }\n    else if (elCSSWidth) {\n      this.$wrapper.css('width', elCSSWidth);\n    }\n    // If input is inside inline-form with no width set, set fixed width\n    else if (this.$element.parents('.form-inline').length) {\n      this.$wrapper.width( elWidth )\n    }\n\n    // Set tokenfield disabled, if original or fieldset input is disabled\n    if (this.$element.prop('disabled') || this.$element.parents('fieldset[disabled]').length) {\n      this.disable();\n    }\n\n    // Set tokenfield readonly, if original input is readonly\n    if (this.$element.prop('readonly')) {\n      this.readonly();\n    }\n\n    // Set up mirror for input auto-sizing\n    this.$mirror = $('<span style=\"position:absolute; top:-999px; left:0; white-space:pre;\"/>');\n    this.$input.css('min-width', this.options.minWidth + 'px')\n    $.each([\n        'fontFamily', \n        'fontSize', \n        'fontWeight', \n        'fontStyle', \n        'letterSpacing', \n        'textTransform', \n        'wordSpacing', \n        'textIndent'\n    ], function (i, val) {\n        _self.$mirror[0].style[val] = _self.$input.css(val);\n    });\n    this.$mirror.appendTo( 'body' )\n\n    // Insert tokenfield to HTML\n    this.$wrapper.insertBefore( this.$element )\n    this.$element.prependTo( this.$wrapper )\n\n    // Calculate inner input width\n    this.update()\n    \n    // Create initial tokens, if any\n    this.setTokens(this.options.tokens, false, false)\n\n    // Start listening to events\n    this.listen()\n\n    // Initialize autocomplete, if necessary\n    if ( ! $.isEmptyObject( this.options.autocomplete ) ) {\n      var side = this.textDirection === 'rtl' ? 'right' : 'left'\n       ,  autocompleteOptions = $.extend({\n            minLength: this.options.showAutocompleteOnFocus ? 0 : null,\n            position: { my: side + \" top\", at: side + \" bottom\", of: this.$wrapper }\n          }, this.options.autocomplete )\n      \n      this.$input.autocomplete( autocompleteOptions )\n    }\n\n    // Initialize typeahead, if necessary\n    if ( ! $.isEmptyObject( this.options.typeahead ) ) {\n      \n      var typeaheadOptions = this.options.typeahead\n        , defaults = {\n            minLength: this.options.showAutocompleteOnFocus ? 0 : null\n          }\n        , args = $.isArray( typeaheadOptions ) ? typeaheadOptions : [typeaheadOptions, typeaheadOptions]\n      \n      args[0] = $.extend( {}, defaults, args[0] )\n\n      this.$input.typeahead.apply( this.$input, args )\n      this.typeahead = true\n    }\n\n    this.$element.trigger('tokenfield:initialize')\n  }\n\n  Tokenfield.prototype = {\n\n    constructor: Tokenfield\n\n  , createToken: function (attrs, triggerChange) {\n      var _self = this\n\n      if (typeof attrs === 'string') {\n        attrs = { value: attrs, label: attrs }\n      }\n\n      if (typeof triggerChange === 'undefined') {\n         triggerChange = true\n      }\n\n      // Normalize label and value\n      attrs.value = $.trim(attrs.value);\n      attrs.label = attrs.label && attrs.label.length ? $.trim(attrs.label) : attrs.value\n\n      // Bail out if has no value or label, or label is too short\n      if (!attrs.value.length || !attrs.label.length || attrs.label.length <= this.options.minLength) return\n\n      // Bail out if maximum number of tokens is reached\n      if (this.options.limit && this.getTokens().length >= this.options.limit) return\n\n      // Allow changing token data before creating it\n      var createEvent = $.Event('tokenfield:createtoken', { attrs: attrs })\n      this.$element.trigger(createEvent)\n\n      // Bail out if there if attributes are empty or event was defaultPrevented\n      if (!createEvent.attrs || createEvent.isDefaultPrevented()) return\n\n      var $token = $('<div class=\"token\" />')\n            .attr('data-value', attrs.value)\n            .append('<span class=\"token-label\" />')\n            .append('<a href=\"#\" class=\"close\" tabindex=\"-1\">&times;</a>')\n\n      // Insert token into HTML\n      if (this.$input.hasClass('tt-input')) {\n        // If the input has typeahead enabled, insert token before it's parent\n        this.$input.parent().before( $token )\n      } else {\n        this.$input.before( $token )\n      }\n\n      // Temporarily set input width to minimum\n      this.$input.css('width', this.options.minWidth + 'px')\n\n      var $tokenLabel = $token.find('.token-label')\n        , $closeButton = $token.find('.close')\n\n      // Determine maximum possible token label width\n      if (!this.maxTokenWidth) {\n        this.maxTokenWidth =\n          this.$wrapper.width() - $closeButton.outerWidth() - \n          parseInt($closeButton.css('margin-left'), 10) -\n          parseInt($closeButton.css('margin-right'), 10) -\n          parseInt($token.css('border-left-width'), 10) -\n          parseInt($token.css('border-right-width'), 10) -\n          parseInt($token.css('padding-left'), 10) -\n          parseInt($token.css('padding-right'), 10)\n          parseInt($tokenLabel.css('border-left-width'), 10) -\n          parseInt($tokenLabel.css('border-right-width'), 10) -\n          parseInt($tokenLabel.css('padding-left'), 10) -\n          parseInt($tokenLabel.css('padding-right'), 10)\n          parseInt($tokenLabel.css('margin-left'), 10) -\n          parseInt($tokenLabel.css('margin-right'), 10)\n      }\n\n      $tokenLabel\n        .text(attrs.label)\n        .css('max-width', this.maxTokenWidth)\n\n      // Listen to events on token\n      $token\n        .on('mousedown',  function (e) {\n          if (_self._disabled || _self._readonly) return false\n          _self.preventDeactivation = true\n        })\n        .on('click',    function (e) {\n          if (_self._disabled || _self._readonly) return false\n          _self.preventDeactivation = false\n\n          if (e.ctrlKey || e.metaKey) {\n            e.preventDefault()\n            return _self.toggle( $token )\n          }\n          \n          _self.activate( $token, e.shiftKey, e.shiftKey )          \n        })\n        .on('dblclick', function (e) {\n          if (_self._disabled || _self._readonly || !_self.options.allowEditing ) return false\n          _self.edit( $token )\n        })\n\n      $closeButton\n          .on('click',  $.proxy(this.remove, this))\n\n      // Trigger createdtoken event on the original field\n      // indicating that the token is now in the DOM\n      this.$element.trigger($.Event('tokenfield:createdtoken', {\n        attrs: attrs,\n        relatedTarget: $token.get(0)\n      }))\n\n      // Trigger change event on the original field\n      if (triggerChange) {\n        this.$element.val( this.getTokensList() ).trigger( $.Event('change', { initiator: 'tokenfield' }) )\n      }\n\n      // Update tokenfield dimensions\n      this.update()\n\n      // Return original element\n      return this.$element.get(0)\n    }    \n\n  , setTokens: function (tokens, add, triggerChange) {\n      if (!tokens) return\n\n      if (!add) this.$wrapper.find('.token').remove()\n\n      if (typeof triggerChange === 'undefined') {\n          triggerChange = true\n      }\n\n      if (typeof tokens === 'string') {\n        if (this._delimiters.length) {\n          // Split based on delimiters\n          tokens = tokens.split( new RegExp( '[' + this._delimiters.join('') + ']' ) )\n        } else {\n          tokens = [tokens];\n        }\n      }\n\n      var _self = this\n      $.each(tokens, function (i, attrs) {\n        _self.createToken(attrs, triggerChange)\n      })\n\n      return this.$element.get(0)\n    }\n\n  , getTokenData: function($token) {\n      var data = $token.map(function() {\n        var $token = $(this);\n        return {\n          value: $token.attr('data-value'),\n          label: $token.find('.token-label').text()\n        }\n      }).get();\n\n      if (data.length == 1) {\n        data = data[0];\n      }\n\n      return data;\n    }\n\n  , getTokens: function(active) {\n      var self = this\n        , tokens = []\n        , activeClass = active ? '.active' : '' // get active tokens only\n      this.$wrapper.find( '.token' + activeClass ).each( function() {\n        tokens.push( self.getTokenData( $(this) ) )\n      })\n      return tokens\n  }\n\n  , getTokensList: function(delimiter, beautify, active) {\n      delimiter = delimiter || this._firstDelimiter\n      beautify = ( typeof beautify !== 'undefined' && beautify !== null ) ? beautify : this.options.beautify\n      \n      var separator = delimiter + ( beautify && delimiter !== ' ' ? ' ' : '')\n      return $.map( this.getTokens(active), function (token) {\n        return token.value\n      }).join(separator)\n  }\n\n  , getInput: function() {\n    return this.$input.val()\n  }\n\n  , listen: function () {\n      var _self = this\n\n      this.$element\n        .on('change',   $.proxy(this.change, this))\n\n      this.$wrapper\n        .on('mousedown',$.proxy(this.focusInput, this))\n\n      this.$input\n        .on('focus',    $.proxy(this.focus, this))\n        .on('blur',     $.proxy(this.blur, this))\n        .on('paste',    $.proxy(this.paste, this))\n        .on('keydown',  $.proxy(this.keydown, this))\n        .on('keypress', $.proxy(this.keypress, this))\n        .on('keyup',    $.proxy(this.keyup, this))\n\n      this.$copyHelper\n        .on('focus',    $.proxy(this.focus, this))\n        .on('blur',     $.proxy(this.blur, this))        \n        .on('keydown',  $.proxy(this.keydown, this))\n        .on('keyup',    $.proxy(this.keyup, this))\n\n      // Secondary listeners for input width calculation\n      this.$input\n        .on('keypress', $.proxy(this.update, this))\n        .on('keyup',    $.proxy(this.update, this))\n\n      this.$input\n        .on('autocompletecreate', function() {\n          // Set minimum autocomplete menu width\n          var $_menuElement = $(this).data('ui-autocomplete').menu.element\n          \n          var minWidth = _self.$wrapper.outerWidth() -\n              parseInt( $_menuElement.css('border-left-width'), 10 ) -\n              parseInt( $_menuElement.css('border-right-width'), 10 )\n\n          $_menuElement.css( 'min-width', minWidth + 'px' )\n        })\n        .on('autocompleteselect', function (e, ui) {\n          if (_self.createToken( ui.item )) {\n            _self.$input.val('')\n            if (_self.$input.data( 'edit' )) {\n              _self.unedit(true)\n            }\n          }\n          return false\n        })\n        .on('typeahead:selected typeahead:autocompleted', function (e, datum, dataset) {\n          // Create token\n          if (_self.createToken( datum )) {\n            _self.$input.typeahead('val', '')\n            if (_self.$input.data( 'edit' )) {\n              _self.unedit(true)\n            }\n          }\n        })\n\n      // Listen to window resize\n      $(window).on('resize', $.proxy(this.update, this ))\n\n    }\n\n  , keydown: function (e) {\n\n      if (!this.focused) return\n\n      var _self = this\n\n      switch(e.keyCode) {\n        case 8: // backspace\n          if (!this.$input.is(document.activeElement)) break\n          this.lastInputValue = this.$input.val()\n          break\n\n        case 37: // left arrow\n          leftRight( this.textDirection === 'rtl' ? 'next': 'prev' )\n          break\n\n        case 38: // up arrow\n          upDown('prev')\n          break\n\n        case 39: // right arrow\n          leftRight( this.textDirection === 'rtl' ? 'prev': 'next' )\n          break\n\n        case 40: // down arrow\n          upDown('next')\n          break        \n\n        case 65: // a (to handle ctrl + a)\n          if (this.$input.val().length > 0 || !(e.ctrlKey || e.metaKey)) break\n          this.activateAll()\n          e.preventDefault()\n          break\n\n        case 9: // tab\n        case 13: // enter     \n\n          // We will handle creating tokens from autocomplete in autocomplete events\n          if (this.$input.data('ui-autocomplete') && this.$input.data('ui-autocomplete').menu.element.find(\"li:has(a.ui-state-focus)\").length) break\n          \n          // We will handle creating tokens from typeahead in typeahead events\n          if (this.$input.hasClass('tt-input') && this.$wrapper.find('.tt-cursor').length ) break\n          if (this.$input.hasClass('tt-input') && this.$wrapper.find('.tt-hint').val().length) break\n          \n          // Create token\n          if (this.$input.is(document.activeElement) && this.$input.val().length || this.$input.data('edit')) {\n            return this.createTokensFromInput(e, this.$input.data('edit'));\n          }\n\n          // Edit token\n          if (e.keyCode === 13) {\n            if (!this.$copyHelper.is(document.activeElement) || this.$wrapper.find('.token.active').length !== 1) break\n            if (!_self.options.allowEditing) break\n            this.edit( this.$wrapper.find('.token.active') )\n          }\n      }\n\n      function leftRight(direction) {\n        if (_self.$input.is(document.activeElement)) {\n          if (_self.$input.val().length > 0) return\n\n          direction += 'All'\n          var $token = _self.$input.hasClass('tt-input') ? _self.$input.parent()[direction]('.token:first') : _self.$input[direction]('.token:first')\n          if (!$token.length) return\n\n          _self.preventInputFocus = true\n          _self.preventDeactivation = true\n\n          _self.activate( $token )\n          e.preventDefault()\n\n        } else {\n          _self[direction]( e.shiftKey )\n          e.preventDefault()\n        }\n      }\n\n      function upDown(direction) {\n        if (!e.shiftKey) return\n\n        if (_self.$input.is(document.activeElement)) {\n          if (_self.$input.val().length > 0) return\n\n          var $token = _self.$input.hasClass('tt-input') ? _self.$input.parent()[direction + 'All']('.token:first') : _self.$input[direction + 'All']('.token:first')\n          if (!$token.length) return\n\n          _self.activate( $token )\n        }\n\n        var opposite = direction === 'prev' ? 'next' : 'prev'\n          , position = direction === 'prev' ? 'first' : 'last'\n\n        _self.firstActiveToken[opposite + 'All']('.token').each(function() {\n          _self.deactivate( $(this) )\n        })\n\n        _self.activate( _self.$wrapper.find('.token:' + position), true, true )\n        e.preventDefault()\n      }\n\n      this.lastKeyDown = e.keyCode\n    }\n\n  , keypress: function(e) {\n      this.lastKeyPressCode = e.keyCode\n      this.lastKeyPressCharCode = e.charCode\n\n      // Comma\n      if ($.inArray( e.charCode, this._triggerKeys) !== -1 && this.$input.is(document.activeElement)) {\n        if (this.$input.val()) {\n          this.createTokensFromInput(e)\n        }\n        return false;\n      }\n    }\n\n  , keyup: function (e) {\n      this.preventInputFocus = false\n\n      if (!this.focused) return\n\n      switch(e.keyCode) {\n        case 8: // backspace\n          if (this.$input.is(document.activeElement)) {\n            if (this.$input.val().length || this.lastInputValue.length && this.lastKeyDown === 8) break\n            \n            this.preventDeactivation = true\n            var $prevToken = this.$input.hasClass('tt-input') ? this.$input.parent().prevAll('.token:first') : this.$input.prevAll('.token:first')\n\n            if (!$prevToken.length) break\n\n            this.activate( $prevToken )\n          } else {\n            this.remove(e)\n          }\n          break\n\n        case 46: // delete\n          this.remove(e, 'next')\n          break\n      }\n      this.lastKeyUp = e.keyCode\n    }\n\n  , focus: function (e) {\n      this.focused = true\n      this.$wrapper.addClass('focus')\n\n      if (this.$input.is(document.activeElement)) {\n        this.$wrapper.find('.active').removeClass('active')\n        this.$firstActiveToken = null\n\n        if (this.options.showAutocompleteOnFocus) {\n          this.search()\n        }\n      }\n    }\n\n  , blur: function (e) {\n\n      this.focused = false\n      this.$wrapper.removeClass('focus')\n\n      if (!this.preventDeactivation && !this.$element.is(document.activeElement)) {\n        this.$wrapper.find('.active').removeClass('active')\n        this.$firstActiveToken = null\n      }\n\n      if (!this.preventCreateTokens && (this.$input.data('edit') && !this.$input.is(document.activeElement) || this.options.createTokensOnBlur )) {\n        this.createTokensFromInput(e) \n      }\n      \n      this.preventDeactivation = false\n      this.preventCreateTokens = false\n    }\n\n  , paste: function (e) {\n      var _self = this\n      \n      // Add tokens to existing ones\n      setTimeout(function () {\n        _self.createTokensFromInput(e)\n      }, 1)\n    }\n\n  , change: function (e) {\n      if ( e.initiator === 'tokenfield' ) return // Prevent loops\n      \n      this.setTokens( this.$element.val() )\n    }\n\n  , createTokensFromInput: function (e, focus) {\n      if (this.$input.val().length < this.options.minLength)\n        return // No input, simply return\n\n      var tokensBefore = this.getTokensList()\n      this.setTokens( this.$input.val(), true )\n      \n      if (tokensBefore == this.getTokensList() && this.$input.val().length)\n        return false // No tokens were added, do nothing (prevent form submit)\n\n      if (this.$input.hasClass('tt-input')) {\n        // Typeahead acts weird when simply setting input value to empty,\n        // so we set the query to empty instead\n        this.$input.typeahead('val', '')\n      } else {\n        this.$input.val('')\n      }\n\n      if (this.$input.data( 'edit' )) {\n        this.unedit(focus)\n      }\n\n      return false // Prevent form being submitted\n    }  \n\n  , next: function (add) {\n      if (add) {\n        var $firstActiveToken = this.$wrapper.find('.active:first')\n          , deactivate = $firstActiveToken && this.$firstActiveToken ? $firstActiveToken.index() < this.$firstActiveToken.index() : false\n\n        if (deactivate) return this.deactivate( $firstActiveToken )\n      }\n\n      var $lastActiveToken = this.$wrapper.find('.active:last')\n        , $nextToken = $lastActiveToken.nextAll('.token:first')\n\n      if (!$nextToken.length) {\n        this.$input.focus()\n        return\n      }\n\n      this.activate($nextToken, add)\n    }\n\n  , prev: function (add) {\n\n      if (add) {\n        var $lastActiveToken = this.$wrapper.find('.active:last')\n          , deactivate = $lastActiveToken && this.$firstActiveToken ? $lastActiveToken.index() > this.$firstActiveToken.index() : false\n\n        if (deactivate) return this.deactivate( $lastActiveToken )\n      }\n\n      var $firstActiveToken = this.$wrapper.find('.active:first')\n        , $prevToken = $firstActiveToken.prevAll('.token:first')\n\n      if (!$prevToken.length) {\n        $prevToken = this.$wrapper.find('.token:first')\n      }\n\n      if (!$prevToken.length && !add) {\n        this.$input.focus()\n        return\n      }\n\n      this.activate( $prevToken, add )\n    }\n\n  , activate: function ($token, add, multi, remember) {\n\n      if (!$token) return\n\n      if (typeof remember === 'undefined') var remember = true\n\n      if (multi) var add = true\n\n      this.$copyHelper.focus()\n\n      if (!add) {\n        this.$wrapper.find('.active').removeClass('active')\n        if (remember) {\n          this.$firstActiveToken = $token \n        } else {\n          delete this.$firstActiveToken\n        }\n      }\n\n      if (multi && this.$firstActiveToken) {\n        // Determine first active token and the current tokens indicies\n        // Account for the 1 hidden textarea by subtracting 1 from both\n        var i = this.$firstActiveToken.index() - 2\n          , a = $token.index() - 2\n          , _self = this\n\n        this.$wrapper.find('.token').slice( Math.min(i, a) + 1, Math.max(i, a) ).each( function() {\n          _self.activate( $(this), true )\n        })\n      }\n\n      $token.addClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , activateAll: function() {\n      var _self = this\n\n      this.$wrapper.find('.token').each( function (i) {\n        _self.activate($(this), i !== 0, false, false)\n      })\n    }\n\n  , deactivate: function($token) {\n      if (!$token) return\n\n      $token.removeClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , toggle: function($token) {\n      if (!$token) return\n\n      $token.toggleClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , edit: function ($token) {\n      if (!$token) return\n\n      var attrs = {\n        value: $token.data('value'),\n        label: $token.find('.token-label').text()\n      }\n\n      // Allow changing input value before editing\n      var options = { attrs: attrs, relatedTarget: $token.get(0) }\n      var editEvent = $.Event('tokenfield:edittoken', options)\n      this.$element.trigger( editEvent )\n      \n      // Edit event can be cancelled if default is prevented\n      if (editEvent.isDefaultPrevented()) return\n\n      $token.find('.token-label').text(attrs.value)\n      var tokenWidth = $token.outerWidth()\n\n      var $_input = this.$input.hasClass('tt-input') ? this.$input.parent() : this.$input\n\n      $token.replaceWith( $_input )\n\n      this.preventCreateTokens = true\n\n      this.$input.val( attrs.value )\n                .select()\n                .data( 'edit', true )\n                .width( tokenWidth )\n\n      this.update();\n\n      // Indicate that token in snow being edited, and is replaced with an input field in the DOM\n      this.$element.trigger($.Event('tokenfield:editedtoken', options ))\n    }\n\n  , unedit: function (focus) {\n      var $_input = this.$input.hasClass('tt-input') ? this.$input.parent() : this.$input\n      $_input.appendTo( this.$wrapper )\n      \n      this.$input.data('edit', false)\n      this.$mirror.text('')\n\n      this.update()\n\n      // Because moving the input element around in DOM \n      // will cause it to lose focus, we provide an option\n      // to re-focus the input after appending it to the wrapper\n      if (focus) {\n        var _self = this\n        setTimeout(function () {\n          _self.$input.focus()\n        }, 1)\n      }\n    }\n\n  , remove: function (e, direction) {\n      if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return\n\n      var $token = (e.type === 'click') ? $(e.target).closest('.token') : this.$wrapper.find('.token.active')\n      \n      if (e.type !== 'click') {\n        if (!direction) var direction = 'prev'\n        this[direction]()\n\n        // Was it the first token?\n        if (direction === 'prev') var firstToken = $token.first().prevAll('.token:first').length === 0\n      }\n\n      // Prepare events and their options\n      var options = { attrs: this.getTokenData( $token ), relatedTarget: $token.get(0) }\n        , removeEvent = $.Event('tokenfield:removetoken', options)\n      \n      this.$element.trigger(removeEvent);\n\n      // Remove event can be intercepted and cancelled\n      if (removeEvent.isDefaultPrevented()) return\n\n      var removedEvent = $.Event('tokenfield:removedtoken', options)\n        , changeEvent = $.Event('change', { initiator: 'tokenfield' })\n\n      // Remove token from DOM\n      $token.remove()\n\n      // Trigger events\n      this.$element.val( this.getTokensList() ).trigger( removedEvent ).trigger( changeEvent )\n\n      // Focus, when necessary:\n      // When there are no more tokens, or if this was the first token\n      // and it was removed with backspace or it was clicked on\n      if (!this.$wrapper.find('.token').length || e.type === 'click' || firstToken) this.$input.focus()\n\n      // Adjust input width\n      this.$input.css('width', this.options.minWidth + 'px')\n      this.update()\n\n      // Cancel original event handlers\n      e.preventDefault()\n      e.stopPropagation()\n    }\n\n    /**\n     * Update tokenfield dimensions\n     */\n  , update: function (e) {\n      var value = this.$input.val()\n        , inputPaddingLeft = parseInt(this.$input.css('padding-left'), 10)\n        , inputPaddingRight = parseInt(this.$input.css('padding-right'), 10)\n        , inputPadding = inputPaddingLeft + inputPaddingRight\n\n      if (this.$input.data('edit')) {\n\n        if (!value) {\n          value = this.$input.prop(\"placeholder\")\n        }\n        if (value === this.$mirror.text()) return\n\n        this.$mirror.text(value)\n        \n        var mirrorWidth = this.$mirror.width() + 10;\n        if ( mirrorWidth > this.$wrapper.width() ) {\n          return this.$input.width( this.$wrapper.width() )\n        }\n\n        this.$input.width( mirrorWidth )\n      }\n      else {\n        this.$input.css( 'width', this.options.minWidth + 'px' )\n        if (this.textDirection === 'rtl') {\n          return this.$input.width( this.$input.offset().left + this.$input.outerWidth() - this.$wrapper.offset().left - parseInt(this.$wrapper.css('padding-left'), 10) - inputPadding - 1 )\n        }\n        this.$input.width( this.$wrapper.offset().left + this.$wrapper.width() + parseInt(this.$wrapper.css('padding-left'), 10) - this.$input.offset().left - inputPadding )\n      }\n    }\n\n  , focusInput: function (e) {\n      if ( $(e.target).closest('.token').length || $(e.target).closest('.token-input').length || $(e.target).closest('.tt-dropdown-menu').length ) return\n      // Focus only after the current call stack has cleared,\n      // otherwise has no effect.\n      // Reason: mousedown is too early - input will lose focus\n      // after mousedown. However, since the input may be moved\n      // in DOM, there may be no click or mouseup event triggered.\n      var _self = this\n      setTimeout(function() {\n        _self.$input.focus()\n      }, 0)\n    }\n\n  , search: function () {\n      if ( this.$input.data('ui-autocomplete') ) {\n        this.$input.autocomplete('search')\n      }\n    }\n\n  , disable: function () {\n      this.setProperty('disabled', true);\n    }\n\n  , enable: function () {\n      this.setProperty('disabled', false);\n    }\n\n  , readonly: function () {\n      this.setProperty('readonly', true);\n    }\n\n  , writeable: function () {\n      this.setProperty('readonly', false);\n    }\n\n  , setProperty: function(property, value) {\n      this['_' + property] = value;\n      this.$input.prop(property, value);\n      this.$element.prop(property, value);\n      this.$wrapper[ value ? 'addClass' : 'removeClass' ](property);\n  }\n\n  , destroy: function() {\n      // Set field value\n      this.$element.val( this.getTokensList() );\n      // Restore styles and properties\n      this.$element.css( this.$element.data('original-styles') );\n      this.$element.prop( 'tabindex', this.$element.data('original-tabindex') );\n      \n      // Re-route tokenfield labele to original input\n      var $label = $( 'label[for=\"' + this.$input.prop('id') + '\"]' )\n      if ( $label.length ) {\n        $label.prop( 'for', this.$element.prop('id') )\n      }\n\n      // Move original element outside of tokenfield wrapper\n      this.$element.insertBefore( this.$wrapper );\n\n      // Remove tokenfield-related data\n      this.$element.removeData('original-styles')\n                   .removeData('original-tabindex')\n                   .removeData('bs.tokenfield');\n\n      // Remove tokenfield from DOM\n      this.$wrapper.remove();\n\n      var $_element = this.$element;\n      delete this;\n\n      return $_element;\n  }\n\n  }\n\n\n /* TOKENFIELD PLUGIN DEFINITION\n  * ======================== */\n\n  var old = $.fn.tokenfield\n\n  $.fn.tokenfield = function (option, param) {\n    var value\n      , args = []\n    \n    Array.prototype.push.apply( args, arguments );\n\n    var elements = this.each(function () {\n      var $this = $(this)\n        , data = $this.data('bs.tokenfield')\n        , options = typeof option == 'object' && option\n\n      if (typeof option === 'string' && data && data[option]) {\n        args.shift()\n        value = data[option].apply(data, args)\n      } else {\n        if (!data && typeof option !== 'string' && !param) $this.data('bs.tokenfield', (data = new Tokenfield(this, options)))\n      }\n    })\n\n    return typeof value !== 'undefined' ? value : elements;\n  }\n\n  $.fn.tokenfield.defaults = {\n    minWidth: 60,\n    minLength: 0,\n    allowEditing: true,\n    limit: 0,\n    autocomplete: {},\n    typeahead: {},\n    showAutocompleteOnFocus: false,\n    createTokensOnBlur: false,\n    delimiter: ',',\n    beautify: true\n  }\n\n  $.fn.tokenfield.Constructor = Tokenfield\n\n\n /* TOKENFIELD NO CONFLICT\n  * ================== */\n\n  $.fn.tokenfield.noConflict = function () {\n    $.fn.tokenfield = old\n    return this\n  }\n\n  return Tokenfield;\n\n}));\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n/* 23 */,\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */,\n/* 28 */,\n/* 29 */,\n/* 30 */,\n/* 31 */,\n/* 32 */,\n/* 33 */,\n/* 34 */,\n/* 35 */,\n/* 36 */,\n/* 37 */,\n/* 38 */,\n/* 39 */,\n/* 40 */,\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   SEOmatic\n * @since     3.0.0\n */\n\n// CSS\n__webpack_require__(10);\n__webpack_require__(11);\n__webpack_require__(9);\n\n// Images\n__webpack_require__(12);\n__webpack_require__(13);\n__webpack_require__(16);\n__webpack_require__(17);\n__webpack_require__(18);\n__webpack_require__(19);\n__webpack_require__(20);\n__webpack_require__(21);\n__webpack_require__(14);\n__webpack_require__(15);\n\n// JavaScript\n__webpack_require__(22);\n\n$(function () {\n\n  $('.seoKeywords').tokenfield({\n    createTokensOnBlur: true\n  });\n});\n\n/***/ })\n],[41]);\n\n\n// WEBPACK FOOTER //\n// js/seomatic.js","module.exports = __webpack_public_path__ + \"img/Seomatic-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/Seomatic-icon.svg\n// module id = 12\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/link-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/link-icon.svg\n// module id = 13\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/missing_image.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/missing_image.png\n// module id = 14\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/no_image_set.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/no_image_set.png\n// module id = 15\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/redirects-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/redirects-icon.svg\n// module id = 16\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/script-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/script-icon.svg\n// module id = 17\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/sitemap-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/sitemap-icon.svg\n// module id = 18\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/structured-data-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/structured-data-icon.svg\n// module id = 19\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/tags-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/tags-icon.svg\n// module id = 20\n// module chunks = 0","module.exports = __webpack_public_path__ + \"img/variables-icon.svg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/assetbundles/seomatic/src/img/variables-icon.svg\n// module id = 21\n// module chunks = 0","/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n/*!\n * bootstrap-tokenfield\n * https://github.com/sliptree/bootstrap-tokenfield\n * Copyright 2013-2014 Sliptree and other contributors; Licensed MIT\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // For CommonJS and CommonJS-like environments where a window with jQuery\n    // is present, execute the factory with the jQuery instance from the window object\n    // For environments that do not inherently posses a window with a document\n    // (such as Node.js), expose a Tokenfield-making factory as module.exports\n    // This accentuates the need for the creation of a real window or passing in a jQuery instance\n    // e.g. require(\"bootstrap-tokenfield\")(window); or require(\"bootstrap-tokenfield\")($);\n    module.exports = global.window && global.window.$ ?\n      factory( global.window.$ ) :\n      function( input ) {\n        if ( !input.$ && !input.fn ) {\n          throw new Error( \"Tokenfield requires a window object with jQuery or a jQuery instance\" );\n        }\n        return factory( input.$ || input );\n      };\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function ($, window) {\n\n  \"use strict\"; // jshint ;_;\n\n /* TOKENFIELD PUBLIC CLASS DEFINITION\n  * ============================== */\n\n  var Tokenfield = function (element, options) {\n    var _self = this\n\n    this.$element = $(element)\n    this.textDirection = this.$element.css('direction');\n\n    // Extend options\n    this.options = $.extend(true, {}, $.fn.tokenfield.defaults, { tokens: this.$element.val() }, this.$element.data(), options)\n    \n    // Setup delimiters and trigger keys\n    this._delimiters = (typeof this.options.delimiter === 'string') ? [this.options.delimiter] : this.options.delimiter\n    this._triggerKeys = $.map(this._delimiters, function (delimiter) {\n      return delimiter.charCodeAt(0);\n    });\n    this._firstDelimiter = this._delimiters[0];\n\n    // Check for whitespace, dash and special characters\n    var whitespace = $.inArray(' ', this._delimiters)\n      , dash = $.inArray('-', this._delimiters)\n\n    if (whitespace >= 0)\n      this._delimiters[whitespace] = '\\\\s'\n\n    if (dash >= 0) {\n      delete this._delimiters[dash]\n      this._delimiters.unshift('-')\n    }\n\n    var specialCharacters = ['\\\\', '$', '[', '{', '^', '.', '|', '?', '*', '+', '(', ')']\n    $.each(this._delimiters, function (index, char) {\n      var pos = $.inArray(char, specialCharacters)\n      if (pos >= 0) _self._delimiters[index] = '\\\\' + char;\n    });\n\n    // Store original input width\n    var elRules = (window && typeof window.getMatchedCSSRules === 'function') ? window.getMatchedCSSRules( element ) : null\n      , elStyleWidth = element.style.width\n      , elCSSWidth\n      , elWidth = this.$element.width()\n\n    if (elRules) {\n      $.each( elRules, function (i, rule) {\n        if (rule.style.width) {\n          elCSSWidth = rule.style.width;\n        }\n      });\n    }\n\n    // Move original input out of the way\n    var hidingPosition = $('body').css('direction') === 'rtl' ? 'right' : 'left',\n        originalStyles = { position: this.$element.css('position') };\n    originalStyles[hidingPosition] = this.$element.css(hidingPosition);\n    \n    this.$element\n      .data('original-styles', originalStyles)\n      .data('original-tabindex', this.$element.prop('tabindex'))\n      .css('position', 'absolute')\n      .css(hidingPosition, '-10000px')\n      .prop('tabindex', -1)\n\n    // Create a wrapper\n    this.$wrapper = $('<div class=\"tokenfield form-control\" />')\n    if (this.$element.hasClass('input-lg')) this.$wrapper.addClass('input-lg')\n    if (this.$element.hasClass('input-sm')) this.$wrapper.addClass('input-sm')\n    if (this.textDirection === 'rtl') this.$wrapper.addClass('rtl')\n\n    // Create a new input\n    var id = this.$element.prop('id') || new Date().getTime() + '' + Math.floor((1 + Math.random()) * 100)\n    this.$input = $('<input type=\"text\" class=\"token-input\" autocomplete=\"off\" />')\n                    .appendTo( this.$wrapper )\n                    .prop( 'placeholder',  this.$element.prop('placeholder') )\n                    .prop( 'id', id + '-tokenfield' )\n                    .prop( 'tabindex', this.$element.data('original-tabindex') )\n\n    // Re-route original input label to new input\n    var $label = $( 'label[for=\"' + this.$element.prop('id') + '\"]' )\n    if ( $label.length ) {\n      $label.prop( 'for', this.$input.prop('id') )\n    }\n\n    // Set up a copy helper to handle copy & paste\n    this.$copyHelper = $('<input type=\"text\" />').css('position', 'absolute').css(hidingPosition, '-10000px').prop('tabindex', -1).prependTo( this.$wrapper )\n    \n    // Set wrapper width\n    if (elStyleWidth) {\n      this.$wrapper.css('width', elStyleWidth);\n    }\n    else if (elCSSWidth) {\n      this.$wrapper.css('width', elCSSWidth);\n    }\n    // If input is inside inline-form with no width set, set fixed width\n    else if (this.$element.parents('.form-inline').length) {\n      this.$wrapper.width( elWidth )\n    }\n\n    // Set tokenfield disabled, if original or fieldset input is disabled\n    if (this.$element.prop('disabled') || this.$element.parents('fieldset[disabled]').length) {\n      this.disable();\n    }\n\n    // Set tokenfield readonly, if original input is readonly\n    if (this.$element.prop('readonly')) {\n      this.readonly();\n    }\n\n    // Set up mirror for input auto-sizing\n    this.$mirror = $('<span style=\"position:absolute; top:-999px; left:0; white-space:pre;\"/>');\n    this.$input.css('min-width', this.options.minWidth + 'px')\n    $.each([\n        'fontFamily', \n        'fontSize', \n        'fontWeight', \n        'fontStyle', \n        'letterSpacing', \n        'textTransform', \n        'wordSpacing', \n        'textIndent'\n    ], function (i, val) {\n        _self.$mirror[0].style[val] = _self.$input.css(val);\n    });\n    this.$mirror.appendTo( 'body' )\n\n    // Insert tokenfield to HTML\n    this.$wrapper.insertBefore( this.$element )\n    this.$element.prependTo( this.$wrapper )\n\n    // Calculate inner input width\n    this.update()\n    \n    // Create initial tokens, if any\n    this.setTokens(this.options.tokens, false, false)\n\n    // Start listening to events\n    this.listen()\n\n    // Initialize autocomplete, if necessary\n    if ( ! $.isEmptyObject( this.options.autocomplete ) ) {\n      var side = this.textDirection === 'rtl' ? 'right' : 'left'\n       ,  autocompleteOptions = $.extend({\n            minLength: this.options.showAutocompleteOnFocus ? 0 : null,\n            position: { my: side + \" top\", at: side + \" bottom\", of: this.$wrapper }\n          }, this.options.autocomplete )\n      \n      this.$input.autocomplete( autocompleteOptions )\n    }\n\n    // Initialize typeahead, if necessary\n    if ( ! $.isEmptyObject( this.options.typeahead ) ) {\n      \n      var typeaheadOptions = this.options.typeahead\n        , defaults = {\n            minLength: this.options.showAutocompleteOnFocus ? 0 : null\n          }\n        , args = $.isArray( typeaheadOptions ) ? typeaheadOptions : [typeaheadOptions, typeaheadOptions]\n      \n      args[0] = $.extend( {}, defaults, args[0] )\n\n      this.$input.typeahead.apply( this.$input, args )\n      this.typeahead = true\n    }\n\n    this.$element.trigger('tokenfield:initialize')\n  }\n\n  Tokenfield.prototype = {\n\n    constructor: Tokenfield\n\n  , createToken: function (attrs, triggerChange) {\n      var _self = this\n\n      if (typeof attrs === 'string') {\n        attrs = { value: attrs, label: attrs }\n      }\n\n      if (typeof triggerChange === 'undefined') {\n         triggerChange = true\n      }\n\n      // Normalize label and value\n      attrs.value = $.trim(attrs.value);\n      attrs.label = attrs.label && attrs.label.length ? $.trim(attrs.label) : attrs.value\n\n      // Bail out if has no value or label, or label is too short\n      if (!attrs.value.length || !attrs.label.length || attrs.label.length <= this.options.minLength) return\n\n      // Bail out if maximum number of tokens is reached\n      if (this.options.limit && this.getTokens().length >= this.options.limit) return\n\n      // Allow changing token data before creating it\n      var createEvent = $.Event('tokenfield:createtoken', { attrs: attrs })\n      this.$element.trigger(createEvent)\n\n      // Bail out if there if attributes are empty or event was defaultPrevented\n      if (!createEvent.attrs || createEvent.isDefaultPrevented()) return\n\n      var $token = $('<div class=\"token\" />')\n            .attr('data-value', attrs.value)\n            .append('<span class=\"token-label\" />')\n            .append('<a href=\"#\" class=\"close\" tabindex=\"-1\">&times;</a>')\n\n      // Insert token into HTML\n      if (this.$input.hasClass('tt-input')) {\n        // If the input has typeahead enabled, insert token before it's parent\n        this.$input.parent().before( $token )\n      } else {\n        this.$input.before( $token )\n      }\n\n      // Temporarily set input width to minimum\n      this.$input.css('width', this.options.minWidth + 'px')\n\n      var $tokenLabel = $token.find('.token-label')\n        , $closeButton = $token.find('.close')\n\n      // Determine maximum possible token label width\n      if (!this.maxTokenWidth) {\n        this.maxTokenWidth =\n          this.$wrapper.width() - $closeButton.outerWidth() - \n          parseInt($closeButton.css('margin-left'), 10) -\n          parseInt($closeButton.css('margin-right'), 10) -\n          parseInt($token.css('border-left-width'), 10) -\n          parseInt($token.css('border-right-width'), 10) -\n          parseInt($token.css('padding-left'), 10) -\n          parseInt($token.css('padding-right'), 10)\n          parseInt($tokenLabel.css('border-left-width'), 10) -\n          parseInt($tokenLabel.css('border-right-width'), 10) -\n          parseInt($tokenLabel.css('padding-left'), 10) -\n          parseInt($tokenLabel.css('padding-right'), 10)\n          parseInt($tokenLabel.css('margin-left'), 10) -\n          parseInt($tokenLabel.css('margin-right'), 10)\n      }\n\n      $tokenLabel\n        .text(attrs.label)\n        .css('max-width', this.maxTokenWidth)\n\n      // Listen to events on token\n      $token\n        .on('mousedown',  function (e) {\n          if (_self._disabled || _self._readonly) return false\n          _self.preventDeactivation = true\n        })\n        .on('click',    function (e) {\n          if (_self._disabled || _self._readonly) return false\n          _self.preventDeactivation = false\n\n          if (e.ctrlKey || e.metaKey) {\n            e.preventDefault()\n            return _self.toggle( $token )\n          }\n          \n          _self.activate( $token, e.shiftKey, e.shiftKey )          \n        })\n        .on('dblclick', function (e) {\n          if (_self._disabled || _self._readonly || !_self.options.allowEditing ) return false\n          _self.edit( $token )\n        })\n\n      $closeButton\n          .on('click',  $.proxy(this.remove, this))\n\n      // Trigger createdtoken event on the original field\n      // indicating that the token is now in the DOM\n      this.$element.trigger($.Event('tokenfield:createdtoken', {\n        attrs: attrs,\n        relatedTarget: $token.get(0)\n      }))\n\n      // Trigger change event on the original field\n      if (triggerChange) {\n        this.$element.val( this.getTokensList() ).trigger( $.Event('change', { initiator: 'tokenfield' }) )\n      }\n\n      // Update tokenfield dimensions\n      this.update()\n\n      // Return original element\n      return this.$element.get(0)\n    }    \n\n  , setTokens: function (tokens, add, triggerChange) {\n      if (!tokens) return\n\n      if (!add) this.$wrapper.find('.token').remove()\n\n      if (typeof triggerChange === 'undefined') {\n          triggerChange = true\n      }\n\n      if (typeof tokens === 'string') {\n        if (this._delimiters.length) {\n          // Split based on delimiters\n          tokens = tokens.split( new RegExp( '[' + this._delimiters.join('') + ']' ) )\n        } else {\n          tokens = [tokens];\n        }\n      }\n\n      var _self = this\n      $.each(tokens, function (i, attrs) {\n        _self.createToken(attrs, triggerChange)\n      })\n\n      return this.$element.get(0)\n    }\n\n  , getTokenData: function($token) {\n      var data = $token.map(function() {\n        var $token = $(this);\n        return {\n          value: $token.attr('data-value'),\n          label: $token.find('.token-label').text()\n        }\n      }).get();\n\n      if (data.length == 1) {\n        data = data[0];\n      }\n\n      return data;\n    }\n\n  , getTokens: function(active) {\n      var self = this\n        , tokens = []\n        , activeClass = active ? '.active' : '' // get active tokens only\n      this.$wrapper.find( '.token' + activeClass ).each( function() {\n        tokens.push( self.getTokenData( $(this) ) )\n      })\n      return tokens\n  }\n\n  , getTokensList: function(delimiter, beautify, active) {\n      delimiter = delimiter || this._firstDelimiter\n      beautify = ( typeof beautify !== 'undefined' && beautify !== null ) ? beautify : this.options.beautify\n      \n      var separator = delimiter + ( beautify && delimiter !== ' ' ? ' ' : '')\n      return $.map( this.getTokens(active), function (token) {\n        return token.value\n      }).join(separator)\n  }\n\n  , getInput: function() {\n    return this.$input.val()\n  }\n\n  , listen: function () {\n      var _self = this\n\n      this.$element\n        .on('change',   $.proxy(this.change, this))\n\n      this.$wrapper\n        .on('mousedown',$.proxy(this.focusInput, this))\n\n      this.$input\n        .on('focus',    $.proxy(this.focus, this))\n        .on('blur',     $.proxy(this.blur, this))\n        .on('paste',    $.proxy(this.paste, this))\n        .on('keydown',  $.proxy(this.keydown, this))\n        .on('keypress', $.proxy(this.keypress, this))\n        .on('keyup',    $.proxy(this.keyup, this))\n\n      this.$copyHelper\n        .on('focus',    $.proxy(this.focus, this))\n        .on('blur',     $.proxy(this.blur, this))        \n        .on('keydown',  $.proxy(this.keydown, this))\n        .on('keyup',    $.proxy(this.keyup, this))\n\n      // Secondary listeners for input width calculation\n      this.$input\n        .on('keypress', $.proxy(this.update, this))\n        .on('keyup',    $.proxy(this.update, this))\n\n      this.$input\n        .on('autocompletecreate', function() {\n          // Set minimum autocomplete menu width\n          var $_menuElement = $(this).data('ui-autocomplete').menu.element\n          \n          var minWidth = _self.$wrapper.outerWidth() -\n              parseInt( $_menuElement.css('border-left-width'), 10 ) -\n              parseInt( $_menuElement.css('border-right-width'), 10 )\n\n          $_menuElement.css( 'min-width', minWidth + 'px' )\n        })\n        .on('autocompleteselect', function (e, ui) {\n          if (_self.createToken( ui.item )) {\n            _self.$input.val('')\n            if (_self.$input.data( 'edit' )) {\n              _self.unedit(true)\n            }\n          }\n          return false\n        })\n        .on('typeahead:selected typeahead:autocompleted', function (e, datum, dataset) {\n          // Create token\n          if (_self.createToken( datum )) {\n            _self.$input.typeahead('val', '')\n            if (_self.$input.data( 'edit' )) {\n              _self.unedit(true)\n            }\n          }\n        })\n\n      // Listen to window resize\n      $(window).on('resize', $.proxy(this.update, this ))\n\n    }\n\n  , keydown: function (e) {\n\n      if (!this.focused) return\n\n      var _self = this\n\n      switch(e.keyCode) {\n        case 8: // backspace\n          if (!this.$input.is(document.activeElement)) break\n          this.lastInputValue = this.$input.val()\n          break\n\n        case 37: // left arrow\n          leftRight( this.textDirection === 'rtl' ? 'next': 'prev' )\n          break\n\n        case 38: // up arrow\n          upDown('prev')\n          break\n\n        case 39: // right arrow\n          leftRight( this.textDirection === 'rtl' ? 'prev': 'next' )\n          break\n\n        case 40: // down arrow\n          upDown('next')\n          break        \n\n        case 65: // a (to handle ctrl + a)\n          if (this.$input.val().length > 0 || !(e.ctrlKey || e.metaKey)) break\n          this.activateAll()\n          e.preventDefault()\n          break\n\n        case 9: // tab\n        case 13: // enter     \n\n          // We will handle creating tokens from autocomplete in autocomplete events\n          if (this.$input.data('ui-autocomplete') && this.$input.data('ui-autocomplete').menu.element.find(\"li:has(a.ui-state-focus)\").length) break\n          \n          // We will handle creating tokens from typeahead in typeahead events\n          if (this.$input.hasClass('tt-input') && this.$wrapper.find('.tt-cursor').length ) break\n          if (this.$input.hasClass('tt-input') && this.$wrapper.find('.tt-hint').val().length) break\n          \n          // Create token\n          if (this.$input.is(document.activeElement) && this.$input.val().length || this.$input.data('edit')) {\n            return this.createTokensFromInput(e, this.$input.data('edit'));\n          }\n\n          // Edit token\n          if (e.keyCode === 13) {\n            if (!this.$copyHelper.is(document.activeElement) || this.$wrapper.find('.token.active').length !== 1) break\n            if (!_self.options.allowEditing) break\n            this.edit( this.$wrapper.find('.token.active') )\n          }\n      }\n\n      function leftRight(direction) {\n        if (_self.$input.is(document.activeElement)) {\n          if (_self.$input.val().length > 0) return\n\n          direction += 'All'\n          var $token = _self.$input.hasClass('tt-input') ? _self.$input.parent()[direction]('.token:first') : _self.$input[direction]('.token:first')\n          if (!$token.length) return\n\n          _self.preventInputFocus = true\n          _self.preventDeactivation = true\n\n          _self.activate( $token )\n          e.preventDefault()\n\n        } else {\n          _self[direction]( e.shiftKey )\n          e.preventDefault()\n        }\n      }\n\n      function upDown(direction) {\n        if (!e.shiftKey) return\n\n        if (_self.$input.is(document.activeElement)) {\n          if (_self.$input.val().length > 0) return\n\n          var $token = _self.$input.hasClass('tt-input') ? _self.$input.parent()[direction + 'All']('.token:first') : _self.$input[direction + 'All']('.token:first')\n          if (!$token.length) return\n\n          _self.activate( $token )\n        }\n\n        var opposite = direction === 'prev' ? 'next' : 'prev'\n          , position = direction === 'prev' ? 'first' : 'last'\n\n        _self.firstActiveToken[opposite + 'All']('.token').each(function() {\n          _self.deactivate( $(this) )\n        })\n\n        _self.activate( _self.$wrapper.find('.token:' + position), true, true )\n        e.preventDefault()\n      }\n\n      this.lastKeyDown = e.keyCode\n    }\n\n  , keypress: function(e) {\n      this.lastKeyPressCode = e.keyCode\n      this.lastKeyPressCharCode = e.charCode\n\n      // Comma\n      if ($.inArray( e.charCode, this._triggerKeys) !== -1 && this.$input.is(document.activeElement)) {\n        if (this.$input.val()) {\n          this.createTokensFromInput(e)\n        }\n        return false;\n      }\n    }\n\n  , keyup: function (e) {\n      this.preventInputFocus = false\n\n      if (!this.focused) return\n\n      switch(e.keyCode) {\n        case 8: // backspace\n          if (this.$input.is(document.activeElement)) {\n            if (this.$input.val().length || this.lastInputValue.length && this.lastKeyDown === 8) break\n            \n            this.preventDeactivation = true\n            var $prevToken = this.$input.hasClass('tt-input') ? this.$input.parent().prevAll('.token:first') : this.$input.prevAll('.token:first')\n\n            if (!$prevToken.length) break\n\n            this.activate( $prevToken )\n          } else {\n            this.remove(e)\n          }\n          break\n\n        case 46: // delete\n          this.remove(e, 'next')\n          break\n      }\n      this.lastKeyUp = e.keyCode\n    }\n\n  , focus: function (e) {\n      this.focused = true\n      this.$wrapper.addClass('focus')\n\n      if (this.$input.is(document.activeElement)) {\n        this.$wrapper.find('.active').removeClass('active')\n        this.$firstActiveToken = null\n\n        if (this.options.showAutocompleteOnFocus) {\n          this.search()\n        }\n      }\n    }\n\n  , blur: function (e) {\n\n      this.focused = false\n      this.$wrapper.removeClass('focus')\n\n      if (!this.preventDeactivation && !this.$element.is(document.activeElement)) {\n        this.$wrapper.find('.active').removeClass('active')\n        this.$firstActiveToken = null\n      }\n\n      if (!this.preventCreateTokens && (this.$input.data('edit') && !this.$input.is(document.activeElement) || this.options.createTokensOnBlur )) {\n        this.createTokensFromInput(e) \n      }\n      \n      this.preventDeactivation = false\n      this.preventCreateTokens = false\n    }\n\n  , paste: function (e) {\n      var _self = this\n      \n      // Add tokens to existing ones\n      setTimeout(function () {\n        _self.createTokensFromInput(e)\n      }, 1)\n    }\n\n  , change: function (e) {\n      if ( e.initiator === 'tokenfield' ) return // Prevent loops\n      \n      this.setTokens( this.$element.val() )\n    }\n\n  , createTokensFromInput: function (e, focus) {\n      if (this.$input.val().length < this.options.minLength)\n        return // No input, simply return\n\n      var tokensBefore = this.getTokensList()\n      this.setTokens( this.$input.val(), true )\n      \n      if (tokensBefore == this.getTokensList() && this.$input.val().length)\n        return false // No tokens were added, do nothing (prevent form submit)\n\n      if (this.$input.hasClass('tt-input')) {\n        // Typeahead acts weird when simply setting input value to empty,\n        // so we set the query to empty instead\n        this.$input.typeahead('val', '')\n      } else {\n        this.$input.val('')\n      }\n\n      if (this.$input.data( 'edit' )) {\n        this.unedit(focus)\n      }\n\n      return false // Prevent form being submitted\n    }  \n\n  , next: function (add) {\n      if (add) {\n        var $firstActiveToken = this.$wrapper.find('.active:first')\n          , deactivate = $firstActiveToken && this.$firstActiveToken ? $firstActiveToken.index() < this.$firstActiveToken.index() : false\n\n        if (deactivate) return this.deactivate( $firstActiveToken )\n      }\n\n      var $lastActiveToken = this.$wrapper.find('.active:last')\n        , $nextToken = $lastActiveToken.nextAll('.token:first')\n\n      if (!$nextToken.length) {\n        this.$input.focus()\n        return\n      }\n\n      this.activate($nextToken, add)\n    }\n\n  , prev: function (add) {\n\n      if (add) {\n        var $lastActiveToken = this.$wrapper.find('.active:last')\n          , deactivate = $lastActiveToken && this.$firstActiveToken ? $lastActiveToken.index() > this.$firstActiveToken.index() : false\n\n        if (deactivate) return this.deactivate( $lastActiveToken )\n      }\n\n      var $firstActiveToken = this.$wrapper.find('.active:first')\n        , $prevToken = $firstActiveToken.prevAll('.token:first')\n\n      if (!$prevToken.length) {\n        $prevToken = this.$wrapper.find('.token:first')\n      }\n\n      if (!$prevToken.length && !add) {\n        this.$input.focus()\n        return\n      }\n\n      this.activate( $prevToken, add )\n    }\n\n  , activate: function ($token, add, multi, remember) {\n\n      if (!$token) return\n\n      if (typeof remember === 'undefined') var remember = true\n\n      if (multi) var add = true\n\n      this.$copyHelper.focus()\n\n      if (!add) {\n        this.$wrapper.find('.active').removeClass('active')\n        if (remember) {\n          this.$firstActiveToken = $token \n        } else {\n          delete this.$firstActiveToken\n        }\n      }\n\n      if (multi && this.$firstActiveToken) {\n        // Determine first active token and the current tokens indicies\n        // Account for the 1 hidden textarea by subtracting 1 from both\n        var i = this.$firstActiveToken.index() - 2\n          , a = $token.index() - 2\n          , _self = this\n\n        this.$wrapper.find('.token').slice( Math.min(i, a) + 1, Math.max(i, a) ).each( function() {\n          _self.activate( $(this), true )\n        })\n      }\n\n      $token.addClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , activateAll: function() {\n      var _self = this\n\n      this.$wrapper.find('.token').each( function (i) {\n        _self.activate($(this), i !== 0, false, false)\n      })\n    }\n\n  , deactivate: function($token) {\n      if (!$token) return\n\n      $token.removeClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , toggle: function($token) {\n      if (!$token) return\n\n      $token.toggleClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , edit: function ($token) {\n      if (!$token) return\n\n      var attrs = {\n        value: $token.data('value'),\n        label: $token.find('.token-label').text()\n      }\n\n      // Allow changing input value before editing\n      var options = { attrs: attrs, relatedTarget: $token.get(0) }\n      var editEvent = $.Event('tokenfield:edittoken', options)\n      this.$element.trigger( editEvent )\n      \n      // Edit event can be cancelled if default is prevented\n      if (editEvent.isDefaultPrevented()) return\n\n      $token.find('.token-label').text(attrs.value)\n      var tokenWidth = $token.outerWidth()\n\n      var $_input = this.$input.hasClass('tt-input') ? this.$input.parent() : this.$input\n\n      $token.replaceWith( $_input )\n\n      this.preventCreateTokens = true\n\n      this.$input.val( attrs.value )\n                .select()\n                .data( 'edit', true )\n                .width( tokenWidth )\n\n      this.update();\n\n      // Indicate that token in snow being edited, and is replaced with an input field in the DOM\n      this.$element.trigger($.Event('tokenfield:editedtoken', options ))\n    }\n\n  , unedit: function (focus) {\n      var $_input = this.$input.hasClass('tt-input') ? this.$input.parent() : this.$input\n      $_input.appendTo( this.$wrapper )\n      \n      this.$input.data('edit', false)\n      this.$mirror.text('')\n\n      this.update()\n\n      // Because moving the input element around in DOM \n      // will cause it to lose focus, we provide an option\n      // to re-focus the input after appending it to the wrapper\n      if (focus) {\n        var _self = this\n        setTimeout(function () {\n          _self.$input.focus()\n        }, 1)\n      }\n    }\n\n  , remove: function (e, direction) {\n      if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return\n\n      var $token = (e.type === 'click') ? $(e.target).closest('.token') : this.$wrapper.find('.token.active')\n      \n      if (e.type !== 'click') {\n        if (!direction) var direction = 'prev'\n        this[direction]()\n\n        // Was it the first token?\n        if (direction === 'prev') var firstToken = $token.first().prevAll('.token:first').length === 0\n      }\n\n      // Prepare events and their options\n      var options = { attrs: this.getTokenData( $token ), relatedTarget: $token.get(0) }\n        , removeEvent = $.Event('tokenfield:removetoken', options)\n      \n      this.$element.trigger(removeEvent);\n\n      // Remove event can be intercepted and cancelled\n      if (removeEvent.isDefaultPrevented()) return\n\n      var removedEvent = $.Event('tokenfield:removedtoken', options)\n        , changeEvent = $.Event('change', { initiator: 'tokenfield' })\n\n      // Remove token from DOM\n      $token.remove()\n\n      // Trigger events\n      this.$element.val( this.getTokensList() ).trigger( removedEvent ).trigger( changeEvent )\n\n      // Focus, when necessary:\n      // When there are no more tokens, or if this was the first token\n      // and it was removed with backspace or it was clicked on\n      if (!this.$wrapper.find('.token').length || e.type === 'click' || firstToken) this.$input.focus()\n\n      // Adjust input width\n      this.$input.css('width', this.options.minWidth + 'px')\n      this.update()\n\n      // Cancel original event handlers\n      e.preventDefault()\n      e.stopPropagation()\n    }\n\n    /**\n     * Update tokenfield dimensions\n     */\n  , update: function (e) {\n      var value = this.$input.val()\n        , inputPaddingLeft = parseInt(this.$input.css('padding-left'), 10)\n        , inputPaddingRight = parseInt(this.$input.css('padding-right'), 10)\n        , inputPadding = inputPaddingLeft + inputPaddingRight\n\n      if (this.$input.data('edit')) {\n\n        if (!value) {\n          value = this.$input.prop(\"placeholder\")\n        }\n        if (value === this.$mirror.text()) return\n\n        this.$mirror.text(value)\n        \n        var mirrorWidth = this.$mirror.width() + 10;\n        if ( mirrorWidth > this.$wrapper.width() ) {\n          return this.$input.width( this.$wrapper.width() )\n        }\n\n        this.$input.width( mirrorWidth )\n      }\n      else {\n        this.$input.css( 'width', this.options.minWidth + 'px' )\n        if (this.textDirection === 'rtl') {\n          return this.$input.width( this.$input.offset().left + this.$input.outerWidth() - this.$wrapper.offset().left - parseInt(this.$wrapper.css('padding-left'), 10) - inputPadding - 1 )\n        }\n        this.$input.width( this.$wrapper.offset().left + this.$wrapper.width() + parseInt(this.$wrapper.css('padding-left'), 10) - this.$input.offset().left - inputPadding )\n      }\n    }\n\n  , focusInput: function (e) {\n      if ( $(e.target).closest('.token').length || $(e.target).closest('.token-input').length || $(e.target).closest('.tt-dropdown-menu').length ) return\n      // Focus only after the current call stack has cleared,\n      // otherwise has no effect.\n      // Reason: mousedown is too early - input will lose focus\n      // after mousedown. However, since the input may be moved\n      // in DOM, there may be no click or mouseup event triggered.\n      var _self = this\n      setTimeout(function() {\n        _self.$input.focus()\n      }, 0)\n    }\n\n  , search: function () {\n      if ( this.$input.data('ui-autocomplete') ) {\n        this.$input.autocomplete('search')\n      }\n    }\n\n  , disable: function () {\n      this.setProperty('disabled', true);\n    }\n\n  , enable: function () {\n      this.setProperty('disabled', false);\n    }\n\n  , readonly: function () {\n      this.setProperty('readonly', true);\n    }\n\n  , writeable: function () {\n      this.setProperty('readonly', false);\n    }\n\n  , setProperty: function(property, value) {\n      this['_' + property] = value;\n      this.$input.prop(property, value);\n      this.$element.prop(property, value);\n      this.$wrapper[ value ? 'addClass' : 'removeClass' ](property);\n  }\n\n  , destroy: function() {\n      // Set field value\n      this.$element.val( this.getTokensList() );\n      // Restore styles and properties\n      this.$element.css( this.$element.data('original-styles') );\n      this.$element.prop( 'tabindex', this.$element.data('original-tabindex') );\n      \n      // Re-route tokenfield labele to original input\n      var $label = $( 'label[for=\"' + this.$input.prop('id') + '\"]' )\n      if ( $label.length ) {\n        $label.prop( 'for', this.$element.prop('id') )\n      }\n\n      // Move original element outside of tokenfield wrapper\n      this.$element.insertBefore( this.$wrapper );\n\n      // Remove tokenfield-related data\n      this.$element.removeData('original-styles')\n                   .removeData('original-tabindex')\n                   .removeData('bs.tokenfield');\n\n      // Remove tokenfield from DOM\n      this.$wrapper.remove();\n\n      var $_element = this.$element;\n      delete this;\n\n      return $_element;\n  }\n\n  }\n\n\n /* TOKENFIELD PLUGIN DEFINITION\n  * ======================== */\n\n  var old = $.fn.tokenfield\n\n  $.fn.tokenfield = function (option, param) {\n    var value\n      , args = []\n    \n    Array.prototype.push.apply( args, arguments );\n\n    var elements = this.each(function () {\n      var $this = $(this)\n        , data = $this.data('bs.tokenfield')\n        , options = typeof option == 'object' && option\n\n      if (typeof option === 'string' && data && data[option]) {\n        args.shift()\n        value = data[option].apply(data, args)\n      } else {\n        if (!data && typeof option !== 'string' && !param) $this.data('bs.tokenfield', (data = new Tokenfield(this, options)))\n      }\n    })\n\n    return typeof value !== 'undefined' ? value : elements;\n  }\n\n  $.fn.tokenfield.defaults = {\n    minWidth: 60,\n    minLength: 0,\n    allowEditing: true,\n    limit: 0,\n    autocomplete: {},\n    typeahead: {},\n    showAutocompleteOnFocus: false,\n    createTokensOnBlur: false,\n    delimiter: ',',\n    beautify: true\n  }\n\n  $.fn.tokenfield.Constructor = Tokenfield\n\n\n /* TOKENFIELD NO CONFLICT\n  * ================== */\n\n  $.fn.tokenfield.noConflict = function () {\n    $.fn.tokenfield = old\n    return this\n  }\n\n  return Tokenfield;\n\n}));\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/bootstrap-tokenfield/js/bootstrap-tokenfield.js\n// module id = 22\n// module chunks = 0","/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   SEOmatic\n * @since     3.0.0\n */\n\n// CSS\nrequire('../css/css-reset.css');\nrequire('../css/style.css');\nrequire('bootstrap-tokenfield/dist/css/bootstrap-tokenfield.min.css');\n\n// Images\nrequire('../img/Seomatic-icon.svg');\nrequire('../img/link-icon.svg');\nrequire('../img/redirects-icon.svg');\nrequire('../img/script-icon.svg');\nrequire('../img/sitemap-icon.svg');\nrequire('../img/structured-data-icon.svg');\nrequire('../img/tags-icon.svg');\nrequire('../img/variables-icon.svg');\nrequire('../img/missing_image.png');\nrequire('../img/no_image_set.png');\n\n// JavaScript\nrequire('bootstrap-tokenfield/js/bootstrap-tokenfield.js');\n\n$(function () {\n\n    $('.seoKeywords').tokenfield({\n        createTokensOnBlur: true,\n    });\n\n});\n\n\n// WEBPACK FOOTER //\n// ./src/assetbundles/seomatic/src/js/seomatic.js"],"sourceRoot":""}