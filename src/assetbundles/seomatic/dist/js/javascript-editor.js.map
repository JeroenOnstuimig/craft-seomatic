{"version":3,"file":"js/javascript-editor.js","mappings":"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","sources":["webpack://seomatic/../src/assetbundles/seomatic/src/js/autocomplete.js","webpack://seomatic/../src/assetbundles/seomatic/src/js/javascript-editor.js"],"sourcesContent":["/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   SEOmatic\n * @since     3.2.22\n */\nconst COMPLETION_KEY = '__completions';\nconst AUTOCOMPLETE_CONTROLLER_ENDPOINT = 'seomatic/autocomplete/index';\n\n/**\n * Get the last item from the array\n *\n * @param arr\n * @returns {*}\n */\nfunction getLastItem(arr) {\n    return arr[arr.length - 1];\n}\n\n/**\n * Register completion items with the Monaco editor, for the Twig language\n *\n * @param completionItems\n */\nfunction addCompletionItemsToMonaco(completionItems) {\n    monaco.languages.registerCompletionItemProvider('twig', {\n        triggerCharacters: ['.', '('],\n        provideCompletionItems: function(model, position, token) {\n            let result = [];\n            // Get the last word the user has typed\n            const currentLine = model.getValueInRange({startLineNumber: position.lineNumber, startColumn: 0, endLineNumber: position.lineNumber, endColumn: position.column});\n            const currentWords = currentLine.replace(\"\\t\", \"\").split(\" \");\n            let currentWord = currentWords[currentWords.length - 1];\n            // If the current word includes ( or >, split on that, too, to allow the autocomplete to work in nested functions and HTML tags\n            if (currentWord.includes('(')) {\n                currentWord = getLastItem(currentWord.split('('));\n            }\n            if (currentWord.includes('>')) {\n                currentWord = getLastItem(currentWord.split('>'));\n            }\n            const isSubProperty = currentWord.charAt(currentWord.length - 1) == \".\";\n            let currentItems = completionItems;\n            // If the last character typed is a period, then we need to look up a sub-property of the completionItems\n            if (isSubProperty) {\n                // Is a sub-property, get a list of parent properties\n                const parents = currentWord.substring(0, currentWord.length - 1).split(\".\");\n                currentItems = completionItems[parents[0]];\n                // Loop through all the parents to traverse the completion items and find the current one\n                for (let i = 1; i < parents.length; i++) {\n                    if (currentItems.hasOwnProperty(parents[i])) {\n                        currentItems = currentItems[parents[i]];\n                    } else {\n                        return result;\n                    }\n                }\n            }\n            // Get all the child properties\n            if (currentItems !== undefined) {\n                for (let item in currentItems) {\n                    if (currentItems.hasOwnProperty(item) && !item.startsWith(\"__\")) {\n                        const completionItem = currentItems[item][COMPLETION_KEY];\n                        if (completionItem !== undefined) {\n                            // Monaco adds a 'range' to the object, to denote where the autocomplete is triggered from,\n                            // which needs to be removed each time the autocomplete objects are re-used\n                            delete completionItem.range;\n                            // Add to final results\n                            result.push(completionItem);\n                        }\n                    }\n                }\n            }\n\n            return {\n                suggestions: result\n            };\n        }\n    });\n}\n\n/**\n * Register hover items with the Monaco editor, for the Twig language\n *\n * @param completionItems\n */\nfunction addHoverHandlerToMonaco(completionItems) {\n    monaco.languages.registerHoverProvider('twig', {\n        provideHover: function (model, position) {\n            let result = {};\n            const currentLine = model.getValueInRange({startLineNumber: position.lineNumber, startColumn: 0, endLineNumber: position.lineNumber, endColumn: model.getLineMaxColumn(position.lineNumber) });\n            const currentWord = model.getWordAtPosition(position);\n            if (currentWord === null) {\n                return;\n            }\n            let searchLine = currentLine.substring(0, currentWord.endColumn -1)\n            let isSubProperty = false;\n            let currentItems = completionItems;\n            for (let i = searchLine.length; i >= 0; i--) {\n                if (searchLine[i] === ' ') {\n                    searchLine = currentLine.substring(i + 1, searchLine.length);\n                    break;\n                }\n            }\n            if (searchLine.includes('.')) {\n                isSubProperty = true;\n            }\n            if (isSubProperty) {\n                // Is a sub-property, get a list of parent properties\n                const parents = searchLine.substring(0, searchLine.length).split(\".\");\n                // Loop through all the parents to traverse the completion items and find the current one\n                for (let i = 0; i < parents.length - 1; i++) {\n                    if (currentItems.hasOwnProperty(parents[i])) {\n                        currentItems = currentItems[parents[i]];\n                    } else {\n                        return result;\n                    }\n                }\n            }\n            if (currentItems !== undefined && currentItems[currentWord.word] !== undefined) {\n                const completionItem = currentItems[currentWord.word][COMPLETION_KEY];\n                if (completionItem !== undefined) {\n                    return {\n                        range: new monaco.Range(position.lineNumber, currentWord.startColumn, position.lineNumber, currentWord.endColum),\n                        contents: [\n                            {value: '**' + completionItem.detail + '**'},\n                            {value: completionItem.documentation},\n                        ]\n                    }\n                }\n            }\n\n            return result;\n        }\n    });\n}\n\n/**\n * Fetch the autocompletion items from local storage, or from the endpoint if they aren't cached in local storage\n */\nfunction getCompletionItemsFromEndpoint(cacheKey) {\n    let urlParams = '';\n    if (typeof cacheKey !== 'undefined' && cacheKey !== null) {\n        urlParams = '?additionalCompletionsCacheKey=' + cacheKey;\n    }\n    // Ping the controller endpoint\n    let request = new XMLHttpRequest();\n    request.open('GET', Craft.getActionUrl(AUTOCOMPLETE_CONTROLLER_ENDPOINT + urlParams), true);\n    request.onload = function () {\n        if (request.status >= 200 && request.status < 400) {\n            const completionItems = JSON.parse(request.responseText);\n            addCompletionItemsToMonaco(completionItems);\n            addHoverHandlerToMonaco(completionItems);\n        } else {\n            console.log('Autocomplete endpoint failed with status ' + request.status)\n        }\n    };\n    request.send();\n}\n\nexport { getCompletionItemsFromEndpoint };\n","/**\n * SEOmatic plugin for Craft CMS 3.x\n *\n * A turnkey SEO implementation for Craft CMS that is comprehensive, powerful,\n * and flexible\n *\n * @link      https://nystudio107.com\n * @copyright Copyright (c) 2017 nystudio107\n */\n\n/**\n * @author    nystudio107\n * @package   SEOmatic\n * @since     3.4.21\n */\n// Set the __webpack_public_path__ dynamically so we can work inside of cpresources's hashed dir name\n// https://stackoverflow.com/questions/39879680/example-of-setting-webpack-public-path-at-runtime\nif (typeof __webpack_public_path__ !== 'string' || __webpack_public_path__ === '') {\n    __webpack_public_path__ = window.seomaticBaseAssetsUrl;\n}\n\nimport * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport editorTheme from 'monaco-themes/themes/Night Owl.json';\nimport { getCompletionItemsFromEndpoint } from '@/js/autocomplete.js';\n\n// Set the default theme\nmonaco.editor.defineTheme('night-owl', editorTheme);\nmonaco.editor.setTheme('night-owl');\n\n// Create the editor\nfunction makeMonacoEditor(elementId, additionalCompletionsCacheKey) {\n    const textArea = document.getElementById(elementId);\n    let container = document.createElement('div');\n    // Make a sibling div for the Monaco editor to live in\n    container.id = elementId + '-monaco-editor';\n    container.classList.add('py-4', 'monaco-editor-background-frame', 'w-full', 'h-full');\n    textArea.parentNode.insertBefore(container, textArea);\n    textArea.style.display = 'none';\n    // Create the Monaco editor\n    let editor = monaco.editor.create(container, {\n        value: textArea.value,\n        language: 'twig',\n        automaticLayout: true,\n        wordWrap: true,\n        scrollBeyondLastLine: false,\n        lineNumbersMinChars: 4,\n        scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'auto',\n        },\n        fontSize: 14,\n        fontFamily: 'SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, Courier, monospace',\n        minimap: {\n            enabled: false\n        },\n    });\n    // Before the form is submitted, copy the changes from the editor to the field\n    document.querySelector(\"#main-form\").addEventListener(\"submit\", function(e) {\n        textArea.value = editor.getValue();\n    });\n    // Get the autocompletion items\n    if (typeof additionalCompletionsCacheKey !== 'undefined' && additionalCompletionsCacheKey !== null) {\n        getCompletionItemsFromEndpoint(additionalCompletionsCacheKey);\n    }\n    // Custom resizer to always keep the editor full-height, without needing to scroll\n    let ignoreEvent = false;\n    const updateHeight = () => {\n        const width = editor.getLayoutInfo().width;\n        const contentHeight = Math.min(1000, editor.getContentHeight());\n        //container.style.width = `${width}px`;\n        container.style.height = `${contentHeight}px`;\n        try {\n            ignoreEvent = true;\n            editor.layout({width, height: contentHeight});\n        } finally {\n            ignoreEvent = false;\n        }\n    };\n    editor.onDidContentSizeChange(updateHeight);\n    updateHeight();\n}\n\nwindow.makeMonacoEditor = makeMonacoEditor;\n\nexport default makeMonacoEditor;\n"],"names":["getLastItem","arr","length","getCompletionItemsFromEndpoint","cacheKey","urlParams","request","XMLHttpRequest","open","Craft","getActionUrl","onload","status","completionItems","JSON","parse","responseText","monaco","languages","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","model","position","token","result","currentWords","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","replace","split","currentWord","includes","isSubProperty","charAt","currentItems","parents","substring","i","hasOwnProperty","undefined","item","startsWith","completionItem","range","push","suggestions","addCompletionItemsToMonaco","registerHoverProvider","provideHover","currentLine","getLineMaxColumn","getWordAtPosition","searchLine","word","Range","endColum","contents","value","detail","documentation","addHoverHandlerToMonaco","console","log","send","makeMonacoEditor","elementId","additionalCompletionsCacheKey","textArea","document","getElementById","container","createElement","id","classList","add","parentNode","insertBefore","style","display","editor","language","automaticLayout","wordWrap","scrollBeyondLastLine","lineNumbersMinChars","scrollbar","vertical","horizontal","fontSize","fontFamily","minimap","enabled","querySelector","addEventListener","e","getValue","updateHeight","width","getLayoutInfo","contentHeight","Math","min","getContentHeight","height","layout","onDidContentSizeChange","__webpack_public_path__","window","seomaticBaseAssetsUrl","editorTheme"],"sourceRoot":""}